---
description: 
globs: 
alwaysApply: true
---

# Development rules

## Comment & Literals

All comment and literals in source code MUST be in English.

## Error handling

Use `http://github.com/m-mizutani/goerr/v2` as errorh handling tool. Wrap errors as following.

```go
func someAction(tasks []task) error {
	for _, t := range tasks {
		if err := validateData(t.Data); err != nil {
			return goerr.Wrap(err, "failed to validate data", goerr.Value("name", t.Name))
		}
	}
	// ....
	return nil
}
```

# Testing

## Style for similar testing

Use following Helper Driven Testing style instead of general Tatble Driven Test. Do not use Table Driven Test style.

```go
	type testCase struct {
		input    string
		expected string
	}

	runTest := func(tc testCase) func(t *testing.T) {
		return func(t *testing.T) {
            actual := someFunc(tc.input)
            gt.Equal(t, tc.expected, actual)
		}
	}

	t.Run("success case", runTest(testCase{
		input: "blue",
        expected: "BLUE",
    }))
```

## Test framework

Use `github.com/m-mizutani/gt` package.

`gt` is test library leveraging Go generics to check variable type in IDE and compiler.

```go
color := "blue"

// gt.Value(t, color).Equal(5) // <- Compile error

gt.Value(t, color).Equal("orange") // <- Fail
gt.Value(t, color).Equal("blue")   // <- Pass
```

```go
colors := ["red", "blue"]

// gt.Array(t, colors).Equal("red")       // <- Compile error
// gt.Array(t, colors).Equal([]int{1, 2}) // <- Compile error

gt.Array(t, colors).Equal([]string{"red", "blue"}) // <- Pass
gt.Array(t, colors).Has("orange")                 // <- Fail
```

### Usage

In many cases, a developer does not care Go generics in using `gt`. However, a developer need to specify generic type (`Value`, `Array`, `Map`, `Error`, etc.) explicitly to use specific test functions for each types.

See @reference for more detail.

#### Value

Generic test type has a minimum set of test methods.

```go
type user struct {
    Name string
}
u1 := user{Name: "blue"}

// gt.Value(t, u1).Equal(1)                  // Compile error
// gt.Value(t, u1).Equal("blue")             // Compile error
// gt.Value(t, u1).Equal(&user{Name:"blue"}) // Compile error

gt.Value(t, u1).Equal(user{Name:"blue"}) // Pass
```

#### Number

Accepts only number types: `int`, `uint`, `int64`, `float64`, etc.

```go
var f float64 = 12.5
gt.Number(t, f).
    Equal(12.5).         // Pass
    Greater(12).         // Pass
    Less(10).            // Fail
    GreaterOrEqual(12.5) // Pass
```

#### Array

Accepts array of any type not only primitive type but also struct.

```go
colors := []string{"red", "blue", "yellow"}

gt.Array(t, colors).
    Equal([]string{"red", "blue", "yellow"}) // Pass
    Equal([]string{"red", "blue"})           // Fail
    // Equal([]int{1, 2})                    // Compile error
    Contain([]string{"red", "blue"})         // Pass
    Has("yellow")                           // Pass
    Length(3)                                // Pass

gt.Array(t, colors).Must().Has("orange") // Fail and stop test
```

#### Map

```go
colorMap := map[string]int{
    "red": 1,
    "yellow": 2,
    "blue": 5,
}

gt.Map(t, colorMap)
    .HasKey("blue")           // Pass
    .HasValue(5)              // Pass
    // .HasValue("red")       // Compile error
    .HasKeyValue("yellow", 2) // Pass

gt.Map(t, colorMap).Must().HasKey("orange") // Fail and stop test
```
